import abc


class ProjectionLayer(abc.ABC):
    """Create a feature projection layer in PyTorch that maintains a voxel
    grid description of the world world, where each voxel grid cell has
    a feature vector associated with it, typically semantic labels.

    Arguments:

    camera_height: int
        the map_height of the image generated by a pinhole camera onboard the
        agent, corresponding to a map_depth and semantic observation.
    camera_width: int
        the map_width of the image generated by a pinhole camera onboard the
        agent, corresponding to a map_depth and semantic observation.
    vertical_fov: float
        the vertical field of view of the onboard camera, measure in
        radians from the bottom of the viewport to the top.

    map_height: int
        the number of grid cells along the 'map_height' axis of the semantic
        map, as rendered using the top down rendering function.
    map_width: int
        the number of grid cells along the 'map_width' axis of the semantic
        map, as rendered using the top down rendering function.
    map_depth: int
        the number of grid cells that are collapsed along the 'up'
        direction by the top down rendering function.
    feature_size: int
        the number of units in each feature vector associated with every
        grid cell, such as the number of image segmentation categories.

    origin_y: float
        the center of the semantic map along the 'map_height' axis of the
        semantic map as viewed from a top-down render of the map.
    origin_x: float
        the center of the semantic map along the 'map_width' axis of the
        semantic map as viewed from a top-down render of the map.
    origin_z: float
        the center of the semantic map along the 'map_depth' axis of the
        semantic map as viewed from a top-down render of the map.
    grid_resolution: float
        the length of a single side of each voxel in the semantic map in
        units of the world coordinate system, which is typically meters.

    interpolation_weight: float
        float representing the interpolation weight used when adding
        new features in the feature map weighted by interpolation_weight.
    initial_feature_map: Optional[torch.Tensor]
        tensor representing the initial feature map tensor,
        which will be set to zero if the value not specified by default.

    """

    @abc.abstractmethod
    def get_feature_map(self, *args, **kwargs):
        """Helper function that returns the wrapped feature map tensor that
        observed features are projected onto during training, that may
        require optional arguments to discern between maps.

        Returns:

        feature_map: torch.Tensor
            tensor representing a three dimensional grid of voxels with
            features projected onto it from incoming observations.

        """

        raise NotImplementedError

    @abc.abstractmethod
    def update(self, *args, **kwargs):
        """Update the semantic map given a map_depth image and a feature image
        by projecting the features onto voxels in the semantic map using
        a set of rays emanating from a virtual pinhole camera.

        Arguments:

        observation["position"]: torch.Tensor
            the position of the agent in the world coordinate system, where
            the position will be binned to voxels in a semantic map.
        observation["yaw"]: torch.Tensor
            a tensor representing the yaw in radians of the coordinate,
            starting from the x-axis and turning counter-clockwise.
        observation["elevation"]: torch.Tensor
            a tensor representing the elevation in radians about the x-axis,
            with positive corresponding to upwards tilt.

        observation["map_depth"]: torch.FloatTensor
            the length of the corresponding ray in world coordinates before
            hitting a surface, with shape: [height, width, 1].
        observation["features"]: Any
            a feature vector for every pixel in the imaging plane, to be
            scattered on the map, with shape: [height, width, num_classes].

        """

        raise NotImplementedError

    @abc.abstractmethod
    def reset(self, *args, **kwargs):
        """Utility function for clearing the contents of the feature map,
        which is typically called at the beginning of an episode with
        a new map origin, in order to reduce gpu memory usage.

        Arguments:

        origin_y: float
            the center of the semantic map along the 'map_height' axis of the
            semantic map as viewed from a top-down render of the map.
        origin_x: float
            the center of the semantic map along the 'map_width' axis of the
            semantic map as viewed from a top-down render of the map.
        origin_z: float
            the center of the semantic map along the 'map_depth' axis of the
            semantic map as viewed from a top-down render of the map.

        """

        raise NotImplementedError

    @abc.abstractmethod
    def top_down(self, *args, **kwargs):
        """Render a top-down view of a map of features organized as a three
        dimensional grid of voxels, by taking the zero vector to be empty
        voxels and rendering the top-most non-empty voxel to a pixel in a grid.

        Arguments:

        depth_slice: slice
            an slice that specifies which map_depth components to use
            when rendering a top down visualization of the feature map.

        Returns:

        feature_image: torch.Tensor
            an image with a feature vector associated with every cell in the
            image corresponding to a visible voxel in the original feature map.

        """

        raise NotImplementedError

    @abc.abstractmethod
    def clamp_to_world(self, *args, **kwargs):
        """Utility function that clamps the coordinates specified to the
        range supported by the semantic map, which is calculated as between
        the midpoints of voxel extrema along each of the coordinate axes.

        Arguments:

        coords: torch.Tensor
            a set of coordinates in xyz order in the coordinate system of the
            world, to be clamped to the range supported by the map.

        Returns:

        coords: torch.Tensor
            a set of coordinates in xyz order in the coordinate system of the
            world, to be clamped to the range supported by the map.

        """

        raise NotImplementedError

    @abc.abstractmethod
    def clamp_to_map(self, *args, **kwargs):
        """Utility function that clamps the coordinates specified to the
        range supported by the semantic map, which is calculated as between
        the midpoints of voxel extrema along each of the coordinate axes.

        Arguments:

        coords: torch.Tensor
            a set of coordinates in xyz order in the coordinate system of the
            map, to be clamped to the range supported by the map.

        Returns:

        coords: torch.Tensor
            a set of coordinates in xyz order in the coordinate system of the
            map, to be clamped to the range supported by the map.

        """

        raise NotImplementedError

    @abc.abstractmethod
    def map_to_world(self, *args, **kwargs):
        """Transform coordinates from the map coordinate system to the world
        coordinate system, assuming a, xyz convention even in the map
        coordinate system, even though it is stored as yxz.

        Arguments:

        coords: torch.Tensor
            a set of coordinates in xyz order in the coordinate system of the
            map to be converted to the world coordinate system.

        Returns:

        world_coords: torch.Tensor
            a set of coordinates in xyz order in the coordinate system of the
            world that have been converted from the map system.

        """

        raise NotImplementedError

    @abc.abstractmethod
    def world_to_map(self, *args, **kwargs):
        """Transform coordinates from the world coordinate system to the map
        coordinate system, assuming a, xyz convention even in the map
        coordinate system, even though it is stored as yxz.

        Arguments:

        world_coords: torch.Tensor
            a set of coordinates in xyz order in the coordinate system of the
            world that will be converted to the map system.

        Returns:

        coords: torch.Tensor
            a set of coordinates in xyz order in the coordinate system of the
            map that were converted from the world coordinate system.

        """

        raise NotImplementedError

    @abc.abstractmethod
    def visualize(self, *args, **kwargs):
        """Helper function that returns an image that is used for
        visualizing contents of the feature map contained in subclasses,
        such as visualizing object categories, or which voxels are obstacles.

        Arguments:

        obs: Dict[str, Any]
            the current observation, as a dict or Tensor, which can be
            used to visualize the current location of the agent in the scene.
        depth_slice: slice
            an slice that specifies which map_depth components to use
            when rendering a top down visualization of the feature map.

        Returns:

        image: np.ndarray
            numpy array representing a visualization the contents of this
            layer, such as an image showing object categories.

        """

        raise NotImplementedError
